# name: Cypress Parallel Tests
# on: [push]

# jobs:
#   cypress-run:
#     name: Cypress Cloud Tests
#     runs-on: ubuntu-latest
#     container: cypress/browsers:node18.12.0-chrome107
#     strategy:
#       # when one test fails, DO NOT cancel the other
#       # containers, because this will kill Cypress processes
#       # leaving Cypress Cloud hanging ...
#       # https://github.com/cypress-io/github-action/issues/48
#       fail-fast: false
#       matrix:
#         # run 2 copies of the current job in parallel
#         containers: [1, 2]
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       # because of "record" and "parallel" parameters
#       # these containers will load balance all found tests among themselves
#       - name: Cypress Tests
#         uses: cypress-io/github-action@v4
#         with:
#           record: true
#           parallel: true
#           group: 'QAAutomationLabs'
#           browser : chrome
#         env:
#           # pass the Cypress Cloud record key as an environment variable
#           CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
#           # pass the GitHub token lets this action correctly
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: example-custom-ci-build-id
on:
  push:
    branches:
      - 'master'
  pull_request:
  workflow_dispatch:

env:
  # Set up the Cypress Cloud project ID and record key as environment variables
  # If the Actions secret EXAMPLE_PROJECT_ID is not defined then
  # the projectId is taken from cypress.json (v9) or cypress.config.js (v10 and later).
  # If the Actions secret EXAMPLE_RECORDING_KEY is not defined then recording jobs are skipped.
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # pass the GitHub token lets this action correctly
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  check-record-key:
    runs-on: ubuntu-22.04
  prepare:
    needs: [check-record-key]
    runs-on: ubuntu-22.04
    # if: needs.check-record-key.outputs.record-key-exists == 'true'
    outputs:
      uuid: ${{ steps.uuid.outputs.value }}
    steps:
      - name: Generate unique ID 
        id: uuid
        # take the current commit + timestamp together
        # the typical value would be something like
        # "sha-5d3fe...35d3-time-1620841214"
        run: echo "value=sha-$GITHUB_SHA-time-$(date +"%s")" >> $GITHUB_OUTPUT

      - name: Print unique ID ðŸ–¨`
        run: echo "generated id ${{ steps.uuid.outputs.value }}"

  # let's run a small subset of the tests
  # and record it to the Cypress Cloud
  smoke-tests:
    needs: [prepare]
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout ðŸ›Ž
        uses: actions/checkout@v4

      - name: Print custom build id ðŸ–¨
        run: echo "Custom build id is ${{ needs.prepare.outputs.uuid }}"

      - name: Smoke tests using custom build id 
        uses: ./
        with:
          # run just some specs in this group
          # we can pass the build id using action parameters
          record: true
          parallel: true
          group: '1 - smoke tests'
          ci-build-id: ${{ needs.prepare.outputs.uuid }}
          spec: 'cypress/e2e/spec-a.cy.js'
          working-directory: examples/recording

  # if smoke tests pass, run all tests, splitting them in parallel
  # because we record with the same build id, smoke and these
  # tests should be under the same logical recorded run
  # under different groups
  all-tests:
    needs: [prepare, smoke-tests]
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        # run 3 copies of the current job in parallel
        containers: [1, 2, 3]
    steps:
      - name: Checkout ðŸ›Ž
        uses: actions/checkout@v4

      - name: Print custom build id ðŸ–¨
        run: echo "Custom build id is ${{ needs.prepare.outputs.uuid }}"

      - name: All tests using custom build id 
        uses: ./
        with:
          # we can pass the build id using CLI argument
          # since we are using a custom command
          command: |
            npx cypress run --record --parallel \
              --ci-build-id ${{ needs.prepare.outputs.uuid }} \
              --group "2 - all tests"
          working-directory: examples/recording